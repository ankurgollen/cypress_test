{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 14,
    "pending": 0,
    "failures": 1,
    "start": "2022-01-30T09:03:37.234Z",
    "end": "2022-01-30T09:04:09.192Z",
    "duration": 14367,
    "testsRegistered": 15,
    "passPercent": 93.33333333333333,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5cdc239c-a68e-4df4-8caf-7bb372691579",
      "title": "",
      "fullFile": "cypress/integration/api_tests/delete_booking.js",
      "file": "cypress/integration/api_tests/delete_booking.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9c69ec55-0bfd-4839-bbf0-a21f8a6ef7e8",
          "title": "Deleting a booking",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User should be able to delete an already exisitng booking",
              "fullTitle": "Deleting a booking User should be able to delete an already exisitng booking",
              "timedOut": null,
              "duration": 3274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting the Auth token\n  method: 'POST',\n  url: BaseURL + '/auth',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n  }\n}).then(res => {\n  expect(res.status).to.equal(200);\n  const authtoken = res.body.token;\n  cy.log('Token is ' + authtoken);\n  cy.request({\n    method: 'GET',\n    url: BaseURL + '/booking',\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    //Getting one bookingid and then using it to delete that booking\n    const bookingID = res.body[2].bookingid;\n    cy.request({\n      method: 'DELETE',\n      url: BaseURL + '/booking/' + bookingID,\n      failOnStatusCode: false,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Cookie': 'token=' + authtoken\n      }\n    }).then(res => {\n      expect(res.status).to.equal(201);\n    });\n  });\n});",
              "err": {},
              "uuid": "6e678230-d7de-4520-9218-64e8f77193de",
              "parentUUID": "9c69ec55-0bfd-4839-bbf0-a21f8a6ef7e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be able to delete without authorisation",
              "fullTitle": "Deleting a booking User should not be able to delete without authorisation",
              "timedOut": null,
              "duration": 750,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  //Getting one bookingid and then using it to delete that booking\n  const bookingID = res.body[2].bookingid;\n  cy.request({\n    method: 'DELETE',\n    url: BaseURL + '/booking/' + bookingID,\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.equal(403);\n  });\n});",
              "err": {},
              "uuid": "07e4e9a1-42a8-4070-a229-804424013d18",
              "parentUUID": "9c69ec55-0bfd-4839-bbf0-a21f8a6ef7e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be able to delete a non existent booking",
              "fullTitle": "Deleting a booking User should not be able to delete a non existent booking",
              "timedOut": null,
              "duration": 795,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting the Auth token\n  method: 'POST',\n  url: BaseURL + '/auth',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n  }\n}).then(res => {\n  expect(res.status).to.equal(200);\n  const authtoken = res.body.token;\n  cy.log('Token is ' + authtoken);\n  cy.request({\n    method: 'DELETE',\n    url: BaseURL + '/booking/0',\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Cookie': 'token=' + authtoken\n    }\n  }).then(res => {\n    expect(res.status).to.equal(405);\n  });\n});",
              "err": {},
              "uuid": "8ec90cb1-266d-4ae6-a31d-2d2c3b788f50",
              "parentUUID": "9c69ec55-0bfd-4839-bbf0-a21f8a6ef7e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e678230-d7de-4520-9218-64e8f77193de",
            "07e4e9a1-42a8-4070-a229-804424013d18",
            "8ec90cb1-266d-4ae6-a31d-2d2c3b788f50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "78ebf70d-86fa-446a-afc8-b6772fc0359b",
      "title": "",
      "fullFile": "cypress/integration/api_tests/get_booking.js",
      "file": "cypress/integration/api_tests/get_booking.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1666b799-d8e3-44c2-91b6-b98ba0087488",
          "title": "Get Details about bookings testcases",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User should be able to get details about any random booking",
              "fullTitle": "Get Details about bookings testcases User should be able to get details about any random booking",
              "timedOut": null,
              "duration": 800,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting some random booking ids\n  method: 'GET',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  //Getting one bookingid and then using it to get details of that booking\n  const bookingID = res.body[0].bookingid;\n  expect(res.status).to.equal(200);\n  cy.log(bookingID);\n  cy.request({\n    method: 'GET',\n    url: BaseURL + '/booking/' + bookingID,\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    //Verifying booking details exist\n    expect(res.status).to.equal(200);\n    expect(res.body.firstname).to.exist;\n    expect(res.body.lastname).to.exist;\n    expect(res.body.totalprice).to.exist;\n    expect(res.body.depositpaid).to.exist;\n    expect(res.body.bookingdates.checkin).to.exist;\n    expect(res.body.bookingdates.checkout).to.exist;\n  });\n});",
              "err": {},
              "uuid": "8a0cebf3-7d96-4fcb-8c47-84d346f34eae",
              "parentUUID": "1666b799-d8e3-44c2-91b6-b98ba0087488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be getting any data with wrong booking id",
              "fullTitle": "Get Details about bookings testcases User should not be getting any data with wrong booking id",
              "timedOut": null,
              "duration": 344,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting details of a non existent booking\n  method: 'GET',\n  url: BaseURL + '/booking/0',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  //Verfiying that error 404 is thrown in case of non existent booking id\n  expect(res.status).to.equal(404);\n});",
              "err": {},
              "uuid": "6535d495-5ed5-4807-b32e-902ede2bdc5b",
              "parentUUID": "1666b799-d8e3-44c2-91b6-b98ba0087488",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should be getting data without any header types",
              "fullTitle": "Get Details about bookings testcases User should be getting data without any header types",
              "timedOut": null,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting details of a booking\n  method: 'GET',\n  url: BaseURL + '/booking/8',\n  failOnStatusCode: false // headers:{\n  //     'Content-Type': 'text/xml'\n  // }\n}).then(res => {\n  //Verifying the details exist\n  expect(res.status).to.equal(200);\n  expect(res.body.firstname).to.exist;\n  expect(res.body.lastname).to.exist;\n  expect(res.body.totalprice).to.exist;\n  expect(res.body.depositpaid).to.exist;\n  expect(res.body.bookingdates.checkin).to.exist;\n  expect(res.body.bookingdates.checkout).to.exist;\n});",
              "err": {},
              "uuid": "33e8e1aa-851c-41dd-ad38-87a7fea8e036",
              "parentUUID": "1666b799-d8e3-44c2-91b6-b98ba0087488",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a0cebf3-7d96-4fcb-8c47-84d346f34eae",
            "6535d495-5ed5-4807-b32e-902ede2bdc5b",
            "33e8e1aa-851c-41dd-ad38-87a7fea8e036"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1524,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1b2ccc93-f790-4646-8614-4d16a78c4079",
      "title": "",
      "fullFile": "cypress/integration/api_tests/post_booking.js",
      "file": "cypress/integration/api_tests/post_booking.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
          "title": "Create Booking cases",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User should be able to create a new booking",
              "fullTitle": "Create Booking cases User should be able to create a new booking",
              "timedOut": null,
              "duration": 837,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": payload.bookingdates,\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  //Verifying the response of POST call with data file\n  expect(res.status).to.equal(200);\n  expect(res.body.booking.firstname).to.equal(payload.firstname);\n  expect(res.body.booking.lastname).to.equal(payload.lastname);\n  expect(res.body.booking.totalprice).to.equal(payload.totalprice);\n  expect(res.body.booking.depositpaid).to.equal(payload.depositpaid);\n  expect(res.body.booking.bookingdates.checkin).to.equal(payload.bookingdates.checkin);\n  expect(res.body.booking.bookingdates.checkout).to.equal(payload.bookingdates.checkout);\n  expect(res.body.booking.additionalneeds).to.equal(payload.additionalneeds);\n}).then(res => {\n  //Verifying the response of POST call by fetching the created booking\n  const bookingID = res.body.bookingid;\n  cy.log(\"Booking id is \" + bookingID);\n  cy.request({\n    method: 'GET',\n    url: BaseURL + '/booking/' + bookingID,\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body.firstname).to.equal(payload.firstname);\n    expect(res.body.lastname).to.equal(payload.lastname);\n    expect(res.body.totalprice).to.equal(payload.totalprice);\n    expect(res.body.depositpaid).to.equal(payload.depositpaid);\n    expect(res.body.bookingdates.checkin).to.equal(payload.bookingdates.checkin);\n    expect(res.body.bookingdates.checkout).to.equal(payload.bookingdates.checkout);\n    expect(res.body.additionalneeds).to.equal(payload.additionalneeds);\n  });\n});",
              "err": {},
              "uuid": "1f15b576-60a4-4a97-9066-2b661ff8830e",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be able to book without any value null",
              "fullTitle": "Create Booking cases User should not be able to book without any value null",
              "timedOut": null,
              "duration": 342,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": null,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": payload.bookingdates,\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  expect(res.status).to.equal(500);\n});",
              "err": {},
              "uuid": "b1959249-9faa-407d-b62f-cfc5d12e6f11",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be able to book with checkin date > checkout date",
              "fullTitle": "Create Booking cases User should not be able to book with checkin date > checkout date",
              "timedOut": null,
              "duration": 685,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": {\n      \"checkin\": \"2020-01-01\",\n      \"checkout\": \"2019-01-01\"\n    },\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  //Asserting that status should be 500, currently user is able to create a booking with checkin date > checkout date'\n  expect(res.status).to.equal(500);\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 500",
                "estack": "AssertionError: expected 200 to equal 500\n    at Context.eval (http://localhost:61450/__cypress/tests?p=cypress/integration/api_tests/post_booking.js:209:29)",
                "diff": "- 200\n+ 500\n"
              },
              "uuid": "18a1ff7d-8803-4127-9800-eb678e35acfc",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should be able to book with additional field added",
              "fullTitle": "Create Booking cases User should be able to book with additional field added",
              "timedOut": null,
              "duration": 476,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": {\n      \"checkin\": \"2020-01-01\",\n      \"checkout\": \"2019-01-01\"\n    },\n    \"additionalneeds\": payload.additionalneeds,\n    \"randomKey\": payload.firstname\n  }\n}).then(res => {\n  //Asserting that status should be 200, currently user is able to create a booking with additional field in body of post'\n  expect(res.status).to.equal(200);\n});",
              "err": {},
              "uuid": "54c2a074-08c7-4f42-b9cb-5cd4402af12e",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f15b576-60a4-4a97-9066-2b661ff8830e",
            "b1959249-9faa-407d-b62f-cfc5d12e6f11",
            "54c2a074-08c7-4f42-b9cb-5cd4402af12e"
          ],
          "failures": [
            "18a1ff7d-8803-4127-9800-eb678e35acfc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2340,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5b1108a7-7c2d-4db7-94dd-6caead86e4e3",
      "title": "",
      "fullFile": "cypress/integration/api_tests/update_booking.js",
      "file": "cypress/integration/api_tests/update_booking.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9bd5defc-80e4-496d-b330-95e1d80ee873",
          "title": "Updating details of Bookings",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Updating a booking without auth token",
              "fullTitle": "Updating details of Bookings Updating a booking without auth token",
              "timedOut": null,
              "duration": 363,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Trying to update a booking without API call\n  method: 'PUT',\n  url: BaseURL + '/booking/21',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": payload.bookingdates,\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  //User should be forbidden from updating without any autherization\n  expect(res.status).to.equal(403);\n});",
              "err": {},
              "uuid": "700ed6e2-5285-4467-9181-2d36bfab136d",
              "parentUUID": "9bd5defc-80e4-496d-b330-95e1d80ee873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Updating a booking with auth token",
              "fullTitle": "Updating details of Bookings Updating a booking with auth token",
              "timedOut": null,
              "duration": 757,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting the Auth token\n  method: 'POST',\n  url: BaseURL + '/auth',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n  }\n}).then(res => {\n  //\n  expect(res.status).to.equal(200);\n  const authtoken = res.body.token;\n  cy.log('Token is ' + authtoken);\n  cy.request({\n    method: 'PUT',\n    url: BaseURL + '/booking/8',\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Cookie': 'token=' + authtoken\n    },\n    body: {\n      \"firstname\": payload.firstname,\n      \"lastname\": payload.lastname,\n      \"totalprice\": payload.totalprice,\n      \"depositpaid\": payload.depositpaid,\n      \"bookingdates\": payload.bookingdates,\n      \"additionalneeds\": payload.additionalneeds\n    }\n  }).then(res => {\n    expect(res.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "db84afed-0b12-4966-a4be-4da5a327c35f",
              "parentUUID": "9bd5defc-80e4-496d-b330-95e1d80ee873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Partially updating a booking with auth token",
              "fullTitle": "Updating details of Bookings Partially updating a booking with auth token",
              "timedOut": null,
              "duration": 785,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Getting the Auth token\n  method: 'POST',\n  url: BaseURL + '/auth',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n  }\n}).then(res => {\n  //\n  expect(res.status).to.equal(200);\n  const authtoken = res.body.token;\n  cy.log('Token is ' + authtoken);\n  cy.request({\n    method: 'PATCH',\n    url: BaseURL + '/booking/8',\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Cookie': 'token=' + authtoken\n    },\n    body: {\n      \"firstname\": payload.firstname,\n      \"lastname\": payload.lastname\n    }\n  }).then(res => {\n    expect(res.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "3fb2e5c4-e80f-4aa6-834f-1d50f7592e95",
              "parentUUID": "9bd5defc-80e4-496d-b330-95e1d80ee873",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "700ed6e2-5285-4467-9181-2d36bfab136d",
            "db84afed-0b12-4966-a4be-4da5a327c35f",
            "3fb2e5c4-e80f-4aa6-834f-1d50f7592e95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1905,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3e0fe06c-3712-4bff-949f-cb41e2e86169",
      "title": "",
      "fullFile": "cypress/integration/test-cases/ui_tests.js",
      "file": "cypress/integration/test-cases/ui_tests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4f9e10b1-57f0-422e-9ee0-075dc2f3362a",
          "title": "Functional UI tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifying that all hyperlinks on page are valid",
              "fullTitle": "Functional UI tests Verifying that all hyperlinks on page are valid",
              "timedOut": null,
              "duration": 3160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('http://uitestingplayground.com/home');\ncy.wrap('passed').as('ctrl');\ncy.get(\"a\").each($el => {\n  if ($el.prop('href').length > 0) {\n    const message = $el.text();\n    expect($el, message).to.have.attr(\"href\").not.contain(\"undefined\");\n    cy.log($el.attr('href'));\n  }\n});",
              "err": {},
              "uuid": "e628a25e-33f6-470e-9fd4-23e063b03406",
              "parentUUID": "4f9e10b1-57f0-422e-9ee0-075dc2f3362a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify page title",
              "fullTitle": "Functional UI tests Verify page title",
              "timedOut": null,
              "duration": 619,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('http://uitestingplayground.com/home');\ncy.title().should(\"eq\", \"UI Test Automation Playground\");",
              "err": {},
              "uuid": "7ac0deac-94a9-449c-b944-498570af7d05",
              "parentUUID": "4f9e10b1-57f0-422e-9ee0-075dc2f3362a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e628a25e-33f6-470e-9fd4-23e063b03406",
            "7ac0deac-94a9-449c-b944-498570af7d05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3779,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.0.1"
    }
  }
}