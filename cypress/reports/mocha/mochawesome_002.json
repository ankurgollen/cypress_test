{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2022-01-30T09:03:51.372Z",
    "end": "2022-01-30T09:03:53.758Z",
    "duration": 2386,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1b2ccc93-f790-4646-8614-4d16a78c4079",
      "title": "",
      "fullFile": "cypress/integration/api_tests/post_booking.js",
      "file": "cypress/integration/api_tests/post_booking.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
          "title": "Create Booking cases",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User should be able to create a new booking",
              "fullTitle": "Create Booking cases User should be able to create a new booking",
              "timedOut": null,
              "duration": 837,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": payload.bookingdates,\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  //Verifying the response of POST call with data file\n  expect(res.status).to.equal(200);\n  expect(res.body.booking.firstname).to.equal(payload.firstname);\n  expect(res.body.booking.lastname).to.equal(payload.lastname);\n  expect(res.body.booking.totalprice).to.equal(payload.totalprice);\n  expect(res.body.booking.depositpaid).to.equal(payload.depositpaid);\n  expect(res.body.booking.bookingdates.checkin).to.equal(payload.bookingdates.checkin);\n  expect(res.body.booking.bookingdates.checkout).to.equal(payload.bookingdates.checkout);\n  expect(res.body.booking.additionalneeds).to.equal(payload.additionalneeds);\n}).then(res => {\n  //Verifying the response of POST call by fetching the created booking\n  const bookingID = res.body.bookingid;\n  cy.log(\"Booking id is \" + bookingID);\n  cy.request({\n    method: 'GET',\n    url: BaseURL + '/booking/' + bookingID,\n    failOnStatusCode: false,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body.firstname).to.equal(payload.firstname);\n    expect(res.body.lastname).to.equal(payload.lastname);\n    expect(res.body.totalprice).to.equal(payload.totalprice);\n    expect(res.body.depositpaid).to.equal(payload.depositpaid);\n    expect(res.body.bookingdates.checkin).to.equal(payload.bookingdates.checkin);\n    expect(res.body.bookingdates.checkout).to.equal(payload.bookingdates.checkout);\n    expect(res.body.additionalneeds).to.equal(payload.additionalneeds);\n  });\n});",
              "err": {},
              "uuid": "1f15b576-60a4-4a97-9066-2b661ff8830e",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be able to book without any value null",
              "fullTitle": "Create Booking cases User should not be able to book without any value null",
              "timedOut": null,
              "duration": 342,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": null,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": payload.bookingdates,\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  expect(res.status).to.equal(500);\n});",
              "err": {},
              "uuid": "b1959249-9faa-407d-b62f-cfc5d12e6f11",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should not be able to book with checkin date > checkout date",
              "fullTitle": "Create Booking cases User should not be able to book with checkin date > checkout date",
              "timedOut": null,
              "duration": 685,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": {\n      \"checkin\": \"2020-01-01\",\n      \"checkout\": \"2019-01-01\"\n    },\n    \"additionalneeds\": payload.additionalneeds\n  }\n}).then(res => {\n  //Asserting that status should be 500, currently user is able to create a booking with checkin date > checkout date'\n  expect(res.status).to.equal(500);\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 500",
                "estack": "AssertionError: expected 200 to equal 500\n    at Context.eval (http://localhost:61450/__cypress/tests?p=cypress/integration/api_tests/post_booking.js:209:29)",
                "diff": "- 200\n+ 500\n"
              },
              "uuid": "18a1ff7d-8803-4127-9800-eb678e35acfc",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should be able to book with additional field added",
              "fullTitle": "Create Booking cases User should be able to book with additional field added",
              "timedOut": null,
              "duration": 476,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  //Creating a new booking\n  method: 'POST',\n  url: BaseURL + '/booking',\n  failOnStatusCode: false,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    \"firstname\": payload.firstname,\n    \"lastname\": payload.lastname,\n    \"totalprice\": payload.totalprice,\n    \"depositpaid\": payload.depositpaid,\n    \"bookingdates\": {\n      \"checkin\": \"2020-01-01\",\n      \"checkout\": \"2019-01-01\"\n    },\n    \"additionalneeds\": payload.additionalneeds,\n    \"randomKey\": payload.firstname\n  }\n}).then(res => {\n  //Asserting that status should be 200, currently user is able to create a booking with additional field in body of post'\n  expect(res.status).to.equal(200);\n});",
              "err": {},
              "uuid": "54c2a074-08c7-4f42-b9cb-5cd4402af12e",
              "parentUUID": "405dd6a5-9a67-4a70-9832-1afdb8e04e81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f15b576-60a4-4a97-9066-2b661ff8830e",
            "b1959249-9faa-407d-b62f-cfc5d12e6f11",
            "54c2a074-08c7-4f42-b9cb-5cd4402af12e"
          ],
          "failures": [
            "18a1ff7d-8803-4127-9800-eb678e35acfc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2340,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.0.1"
    }
  }
}